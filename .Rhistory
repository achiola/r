skewness(x)
kurtosis(x)
hist(x)
data <- read.csv("Seccion 04 - El análisis exploratorio de datos/auto-mpg.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Buscamos subconjuntos basados en los idx
data[1:5,8:9]
# Buscamos subconjuntos basados en los idx por nombre
data[1:5,c("model_year", "car_name")]
data[1:5,c(8,9)]
# Min & max
data[data$mpg == max(data$mpg)]
# Min & max
data[data$mpg == max(data$mpg),]
# Min & max
data[data$mpg == min(data$mpg) | data$mpg == max(data$mpg),]
# Por condicion
data[data$mpg>30 & data$cylinders == 6,]
# Por condicion
data[data$mpg>30 & data$cylinders == 6,]
# Por condicion
data[data$mpg>30 & data$cylinders == 6,]
data[data$mpg>30 & data$cylinders == 6,c("car_name","mpg")]
####################################################
# subset
####################################################
subset(data, mpg>30)
####################################################
# subset
####################################################
subset(data, mpg>30 & cylinders == 6)
####################################################
# subset
####################################################
subset(data, mpg>30 & cylinders == 6, select = c("car_name", "mpg"))
subset(data, mpg>30 , select = c("car_name", "mpg","model_year"))
subset(data, mpg>35 , select = c("car_name", "mpg","model_year"))
subset(data, mpg>40 , select = c("car_name", "mpg","model_year"))
subset(data, mpg>40 , select = c("car_name", "mpg","model_year","cylinders"))
data <- read.csv("Seccion 04 - El análisis exploratorio de datos/auto-mpg.csv",
header = T,
stringsAsFactors = F)
View(data)
## Split
carslist <- split(data, data$cylinders)
View(carslist)
carslist[["3"]]
str(carslist[1])
str(carslist[[1]])
install.packages("caret")
library(caret)
data <- read.csv("Seccion 04 - El análisis exploratorio de datos/BostonHousing.csv",
header = T,
stringsAsFactors = F)
training.ids <- createDataPartition(data$MEDV, p = 0.8, list = F)
View(training.ids)
data.training <- data[training.ids,]
data.test <- data[!training.ids,]
data.test <- data[-training.ids,]
training.ids2 <- createDataPartition(data$MEDV, p = 0.7, list = F)
training.ids.2 <- createDataPartition(data$MEDV, p = 0.7, list = F)
data.training.2 <- data[training.ids.2,]
temp <- data[-training.ids.2,]
training.ids.3 <- createDataPartition(temp$MEDV, p = 0.5, list = F)
data.test.2 <- data[training.ids.3,]
data.validation.2 <- data[-training.ids.3,]
View(data.test.2)
data.test.2 <- temp[training.ids.3,]
data.validation.2 <- temp[-training.ids.3,]
###########################################################
hist(acceleration)
###########################################################
hist(acceleration)
auto <- read.csv("Seccion 04 - El análisis exploratorio de datos/auto-mpg.csv",
header = T,
stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3 cil", "4 cil", "5 cil", "6 cil", "8 cil"))
# ahora forma parte de la session actual de r ???!!
attach(auto)
head(cylinders)
###########################################################
hist(acceleration)
# agregamos color
hist(acceleration,
col = "blue")
# agregamos etiquetas
hist(acceleration,
col = "blue",
xlab = "Aceleración",
ylab = "Frecuencia",
main = "Histograma de las aceleraciones")
# Divisiones
hist(acceleration,
col = "blue",
xlab = "Aceleración",
ylab = "Frecuencia",
main = "Histograma de las aceleraciones",
breaks = 16)
###########################################################
#boxplots
boxplot(mpg,
xlab = "Millas por galon")
View(auto)
#dividimos los datos
boxplot(mpg ~ model_year,
xlab = "Millas por galon")
#Otro ejemplo
boxplot(mpg ~ cylinders,
xlab = "Millas por galon")
###########################################################
#scatterplot
plot(mpg ~ horsepower)
#matriz de scatterplots
pairs(~mpg+displacement+horsepower+weight)
# mas colorines
hist(acceleration,
col = rainbow(16),
xlab = "Aceleración",
ylab = "Frecuencia",
main = "Histograma de las aceleraciones",
breaks = 16)
#graficar todo el df
boxplot(auto)
auto <- read.csv("Seccion 04 - El análisis exploratorio de datos/auto-mpg.csv",
header = T,
stringsAsFactors = T)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3 cil", "4 cil", "5 cil", "6 cil", "8 cil"))
#graficar todo el df
boxplot(auto)
###########################################################
#Combinar graficos
hist(mpg)
###########################################################
#Combinar graficos
hist(mpg, probability = T)
lines(density(mpg))
hist(mpg, probability = T, breaks = 16)
lines(density(mpg))
plot(mpg ~ horsepower)
linearmodel <- lm(mpg ~ horsepower)
abline(linearmodel)
#agregar colores para cada cilindrada
plot(mpg ~ horsepower, type = "n")
linearmodel <- lm(mpg ~ horsepower)
abline(linearmodel)
with(subset(auto, cylinders == "8 cil"), points(horsepower, mpg, col = "red"))
with(subset(auto, cylinders == "6 cil"), points(horsepower, mpg, col = "yellow"))
with(subset(auto, cylinders == "5 cil"), points(horsepower, mpg, col = "green"))
with(subset(auto, cylinders == "4 cil"), points(horsepower, mpg, col = "blue"))
with(subset(auto, cylinders == "3 cil"), points(horsepower, mpg))
with(subset(auto, cylinders == "4 cil"), points(horsepower, mpg, col = "blue", bg = "blue"))
#agregar colores para cada cilindrada
plot(mpg ~ horsepower, type = "n")
linearmodel <- lm(mpg ~ horsepower)
abline(linearmodel)
with(subset(auto, cylinders == "8 cil"), points(horsepower, mpg, col = "red"))
with(subset(auto, cylinders == "6 cil"), points(horsepower, mpg, col = "yellow"))
with(subset(auto, cylinders == "5 cil"), points(horsepower, mpg, col = "green"))
with(subset(auto, cylinders == "4 cil"), points(horsepower, mpg, col = "blue", bg = "blue"))
with(subset(auto, cylinders == "3 cil"), points(horsepower, mpg))
with(subset(auto, cylinders == "4 cil"), points(horsepower, mpg, col = "blue", pch=19))
#agregar colores para cada cilindrada
plot(mpg ~ horsepower, type = "n")
linearmodel <- lm(mpg ~ horsepower)
abline(linearmodel)
with(subset(auto, cylinders == "8 cil"), points(horsepower, mpg, col = "red", pch=19))
with(subset(auto, cylinders == "6 cil"), points(horsepower, mpg, col = "yellow", pch=19))
with(subset(auto, cylinders == "5 cil"), points(horsepower, mpg, col = "green", pch=19))
with(subset(auto, cylinders == "4 cil"), points(horsepower, mpg, col = "blue", pch=19))
with(subset(auto, cylinders == "3 cil"), points(horsepower, mpg, pch=19))
###########################################################
#Combinar de plots
old.par <- par()
old.par
par(mfrow = c(1,2))
with(auto , {
plot(mpg ~ weight, main = "Peso vs consumo")
plot(mpg ~ acceleration, main ="Aceleracion vs consumo")
})
par(old.par)
auto <- read.csv("Seccion 04 - El análisis exploratorio de datos/auto-mpg.csv",
header = T,
stringsAsFactors = T)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3 cil", "4 cil", "5 cil", "6 cil", "8 cil"))
auto <- read.csv("Seccion 04 - El análisis exploratorio de datos/auto-mpg.csv",
header = T,
stringsAsFactors = T)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3 cil", "4 cil", "5 cil", "6 cil", "8 cil"))
library(lattice)
bwplot(auto$mpg | auto$cylinders,
main = "MPG Segun cilindrada",
xlab = "Millas por galon")
bwplot(~auto$mpg | auto$cylinders,
main = "MPG Segun cilindrada",
xlab = "Millas por galon")
xyplot(mpg ~ weight | cylinders, data = auto)
xyplot(mpg ~ weight | cylinders, data = auto,
main = "Peso vs Consumo vs Cilindrada")
xyplot(mpg ~ weight | cylinders, data = auto,
main = "Peso vs Consumo vs Cilindrada",
xlab = "Peso",
ylab = "Consumo")
## cambiar el tema
trellis.par.set(theme = col.whitebg())
xyplot(mpg ~ weight | cylinders, data = auto,
main = "Peso vs Consumo vs Cilindrada",
xlab = "Peso",
ylab = "Consumo")
xyplot(mpg ~ weight | cylinders, data = auto,
main = "Peso vs Consumo vs Cilindrada",
xlab = "Peso",
ylab = "Consumo",
aspect = 1, layout = c(2,3))
xyplot(mpg ~ weight | cylinders, data = auto,
main = "Peso vs Consumo vs Cilindrada",
xlab = "Peso",
ylab = "Consumo",
aspect = 1, layout = c(3,2))
data <- read.csv("Seccion 04 - El análisis exploratorio de datos/daily-bike-rentals.csv")
View(data)
data$season <- factor(data$season,
levels = c(1, 2, 3, 4),
labels = c("Invierno", "Primavera", "Verano", "Otoño"))
data$workingday <- factor(data$workingday,
levels = c(0, 1),
labels = c("Festivo", "De trabajo"))
data$weathersit <- factor(data$weathersit,
levels = c(1, 2, 3),
labels = c("Despejado", "Nublado", "Lluvia/nieve"))
attach(data)
par(mfrow=c(2,2))
winter <- subset(data, season == "Invierno")$cnt
sprint <- subset(data, season == "Primavera")$cnt
summer <- subset(data, season == "Verano")$cnt
Outunm <- subset(data, season == "Otoño")$cnt
fall <- subset(data, season == "Otoño")$cnt
Outunm =0
hist(winter, prob = T, xlab = "Alquiler en Invierno")
par(mfrow=c(2,2))
hist(winter, prob = T, xlab = "Alquiler en Invierno")
hist(winter, prob = T, xlab = "Alquiler en Invierno")
hist(winter, prob = T, xlab = "Alquiler en Invierno")
hist(winter, prob = T, xlab = "Alquiler en Invierno")
par(mfrow=c(2,2))
winter <- subset(data, season == "Invierno")$cnt
sprint <- subset(data, season == "Primavera")$cnt
summer <- subset(data, season == "Verano")$cnt
fall <- subset(data, season == "Otoño")$cnt
hist(winter, prob = T, xlab = "Alquiler en Invierno")
par(mfrow=c(2,2))
winter <- subset(data, season == "Invierno")$cnt
sprint <- subset(data, season == "Primavera")$cnt
summer <- subset(data, season == "Verano")$cnt
fall <- subset(data, season == "Otoño")$cnt
hist(winter, prob = T, xlab = "Alquiler en Invierno")
lines(density(winter))
abline(v = mean(winter), col = "red")
abline(v = median(winter), col = "blue")
hist(winter, prob = T, xlab = "Alquiler en Primavera")
lines(density(sprint))
abline(v = mean(sprint), col = "red")
abline(v = median(sprint), col = "blue")
hist(winter, prob = T, xlab = "Alquiler en Verano")
lines(density(summer))
abline(v = mean(summer), col = "red")
abline(v = median(summer), col = "blue")
hist(sprint, prob = T, xlab = "Alquiler en Primavera")
par(mfrow=c(2,2))
winter <- subset(data, season == "Invierno")$cnt
sprint <- subset(data, season == "Primavera")$cnt
summer <- subset(data, season == "Verano")$cnt
fall <- subset(data, season == "Otoño")$cnt
par(mfrow=c(2,2))
winter <- subset(data, season == "Invierno")$cnt
sprint <- subset(data, season == "Primavera")$cnt
summer <- subset(data, season == "Verano")$cnt
fall <- subset(data, season == "Otoño")$cnt
hist(winter, prob = T, xlab = "Alquiler en Invierno")
lines(density(winter))
abline(v = mean(winter), col = "red")
abline(v = median(winter), col = "blue")
hist(sprint, prob = T, xlab = "Alquiler en Primavera")
lines(density(sprint))
abline(v = mean(sprint), col = "red")
abline(v = median(sprint), col = "blue")
hist(summer, prob = T, xlab = "Alquiler en Verano")
lines(density(summer))
abline(v = mean(summer), col = "red")
abline(v = median(summer), col = "blue")
hist(fall, prob = T, xlab = "Alquiler en Otoño")
lines(density(fall))
abline(v = mean(fall), col = "red")
abline(v = median(fall), col = "blue")
##################################################
## 52. El gráfico de las judías
##################################################
install.packages("beanplot")
library(beanplot)
par(mfrow=c(1,1))
beanplot(data$cnt ~ data$season,
col = c("blue","red", "yellow", "brows"))
beanplot(data$cnt ~ data$season,
col = c("blue","red", "yellow", "brown"))
par(mfrow=c(1,1))
beanplot(data$cnt ~ data$season,
col = c("blue","red", "yellow"))
data$dteday <- as.Date(data$dteday, format = "%Y-%m-%d")
data$season <- factor(data$season,
levels = c(1, 2, 3, 4),
labels = c("Invierno", "Primavera", "Verano", "Otoño"))
data$workingday <- factor(data$workingday,
levels = c(0, 1),
labels = c("Festivo", "De trabajo"))
data$weathersit <- factor(data$weathersit,
levels = c(1, 2, 3),
labels = c("Despejado", "Nublado", "Lluvia/nieve"))
attach(data)
View(data)
##################################################
## 53. Análisis de la causalidad
##################################################
library(lattice)
bwplot(cnt ~ weathersit, data = data, layout = c(1,1),
xlab = "Pronostico del tiempo", ylab = "Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red", "yellow", "green"))))
##################################################
## 53. Análisis de la causalidad
##################################################
library(lattice)
bwplot(cnt ~ weathersit, data = data, layout = c(1,1),
xlab = "Pronostico del tiempo", ylab = "Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red", "yellow", "green"))))
bwplot(cnt ~ weathersit, data = data, layout = c(1,1),
xlab = "Pronostico del tiempo", ylab = "Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red", "yellow", "green"))))
bwplot(cnt ~ weathersit, data = data,
layout = c(1,1),
xlab = "PronÃ³stico del tiempo",
ylab = "Frecuencias",
panel = function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,jitter.data = TRUE,...)
},
par.settings = list(box.rectangle = list(fill = c('red', 'yellow', 'green'))))
bwplot(cnt ~ weathersit, data = data,
layout = c(1,1),
xlab = "Pronostico del tiempo",
ylab = "Frecuencias",
panel = function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,jitter.data = TRUE,...)
},
par.settings = list(box.rectangle = list(fill = c('red', 'yellow', 'green'))))
data <- read.csv("Seccion 04 - El análisis exploratorio de datos/daily-bike-rentals.csv")
bwplot(cnt ~ weathersit, data = data,
layout = c(1,1),
xlab = "Pronostico del tiempo",
ylab = "Frecuencias",
panel = function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,jitter.data = TRUE,...)
},
par.settings = list(box.rectangle = list(fill = c('red', 'yellow', 'green'))))
bwplot(cnt ~ weathersit, data = data, layout = c(1,1),
xlab = "Pronostico del tiempo", ylab = "Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red", "yellow", "green"))))
par(mfrow=c(1,1))
bwplot(cnt ~ weathersit, data = data, layout = c(1,1),
xlab = "Pronostico del tiempo", ylab = "Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red", "yellow", "green"))))
data$dteday <- as.Date(data$dteday, format = "%Y-%m-%d")
data <- read.csv("Seccion 04 - El análisis exploratorio de datos/daily-bike-rentals.csv")
data$dteday <- as.Date(data$dteday, format = "%Y-%m-%d")
bwplot(cnt ~ weathersit, data = data, layout = c(1,1),
xlab = "Pronostico del tiempo", ylab = "Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red", "yellow", "green"))))
bwplot(cnt ~ weathersit, data = data, layout = c(1,1),
xlab = "Pronostico del tiempo", ylab = "Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red", "yellow", "green"))))
# Creamos una secuencia
s <- seq(0.01, 0.99, 0.01)
qn <- qnorm(s)
qn
df <- data.frame(p = s, q = qn)
View(df)
sample <- rnorm(200)
quantile(sample, probs = s)
#qqnorm
trees
qqnorm(trees$Height)
#qqplot
randu
#tiene dist. uniforme
n <- length(randu$x)
y <- qunif(n)
y <- qunif(ppoints(n))
qqplot(y, trees$x)
qqplot(y, randu$x)
y_normal <- qnorm(n)
y_normal <- qnorm(ppoints(n))
qqplot(y_normal, randu$x)
chi3 <- qchisq(points(30), df = 3)
qqnorm(n30,chi3)
chi3 <- qchisq(points(30), df = 3)
n30 <- qnorm(points(30))
qqnorm(n30,chi3)
n30 <- qnorm(points(30))
chi3 <- qchisq(points(30), df = 3)
# que pasaria si...
y_normal <- qnorm(ppoints(n))
chi3 <- qchisq(points(30), df = 3)
chi3 <- qchisq(ppoints(30), df = 3)
n30 <- qnorm(ppoints(30))
qqnorm(n30,chi3)
qqplot(n30,chi3)
cauchy <- qcauchy(ppoints(30))
qqplot(n30,cauchy)
# Veamos que son todas estas distribuciones
s <- seq(-3, 3, 0.1)
# Veamos que son todas estas distribuciones
x<- seq(-3, 3, 0.1)
# Veamos que son todas estas distribuciones
x <- seq(-3, 3, 0.1)
plot(x, dnorm(x))
# Veamos que son todas estas distribuciones
x <- seq(-3, 3, 0.01)
plot(x, dnorm(x))
plot(x, pnorm(x))
par(mfrow=(1,2))
plot(x, dnorm(x)) # Dist. normal
plot(x, pnorm(x)) # Dist. normal acumulativa
par(mfrow=c(1,2))
plot(x, dnorm(x)) # Dist. normal
plot(x, pnorm(x)) # Dist. normal acumulativa
par(mfrow=c(2,2))
plot(x, dnorm(x)) # Dist. normal
plot(x, pnorm(x)) # Dist. normal acumulativa
plot(x, dchisq(x, df = 3)) # Dist. chisq
plot(x, pchisq(x, df = 3)) # Dist. chisq acumulativa
par(mfrow=c(3,2))
plot(x, dnorm(x)) # Dist. normal
plot(x, pnorm(x)) # Dist. normal acumulativa
plot(x, dchisq(x, df = 3)) # Dist. chisq
plot(x, pchisq(x, df = 3)) # Dist. chisq acumulativa
plot(x, dcauchy(x)) # Dist. cauchy
plot(x, pcauchy(x)) # Dist. cauchy acumulada
cp <- read.csv("Seccion 05 - El proceso de clasificacion/college-perf.csv")
View(cp)
# vamos a ordenar los factores, para que tengan sentido
cp$Perf <- ordered(cp$Perf, levels(c("Low", "Medium", "High")))
cp$Pred <- ordered(cp$Pred, levels(c("Low", "Medium", "High")))
table = table(cp$Perf, cp$Pred, dnn = c("Actual", "Predecido"))
table
table <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predecido"))
table <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predecido"))
table
cp <- read.csv("Seccion 05 - El proceso de clasificacion/college-perf.csv")
# vamos a ordenar los factores, para que tengan sentido
cp$Perf <- ordered(cp$Perf, levels = c("Low", "Medium", "High"))
cp$Pred <- ordered(cp$Pred, levels = c("Low", "Medium", "High"))
table <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predecido"))
table
prop.table(table)
prop.table(table,1)*100
round(prop.table(table,1)*100,2)
# 100 por columna
round(prop.table(table,2)*100,2)
############################################
## 58. Diagramas de mosaico
############################################
barplot(table, legend = T)
############################################
## 58. Diagramas de mosaico
############################################
barplot(table,
legend = T,
xlab = "Prediccion",
ylab = "Real")
mosaicplot(table, main = "Eficiencia del modelo")
summary(table)
usaarrest <- read.csv("Seccion 05 - El proceso de clasificacion/USArrests.csv")
usaarrest <- read.csv("Seccion 05 - El proceso de clasificacion/USArrests.csv")
View(usaarrest)
usaarrest <- read.csv("Seccion 05 - El proceso de clasificacion/USArrests.csv",
stringsAsFactors = F)
row.names(usaarrest$X)
View(usaarrest)
row.names(usaarrest)<-usaarrest$X
usaarrest$X <- NULL
apply(usaarrest, 2, var)
acp <- prcomp(usaarrest,
center = T,
scale = T)
print(acp)
plot(acp, type = "l")
summary(acp)
biplot(acp, scale = 0)
pc1 <- apply(acp$rotation[,1] * usaarrest, 1, sum)
pc1
pc2 <- apply(acp$rotation[,2] * usaarrest, 1, sum)
usaarrest$pc1 <- pc1
usaarrest$pc2 <- pc2
usaarrest[,1:4] <- NULL
