getwd()
install.packages(c("boot", "foreign", "nlme"))
auto < read.csv(
"Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/auto-mpg.csv",
header = TRUE,
sep = ",")
auto <- read.csv(
"Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/auto-mpg.csv",
header = TRUE,
sep = ",")
View(auto)
names(auto)
auto_no_head = read.csv(
"Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/auto-mpg-noheader.csv",
header = FALSE
)
View(auto_no_head)
head(auto_no_head, 4)
auto_custom_head = read.csv(
"Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/auto-mpg-noheader.csv",
header = FALSE,
col.names = c("No", "mpg", "cylinders", "displacement", "horsepower",
"weight", "acceleration", "model_year", "car_name")
)
head(auto_custom_head, 4)
head(auto_custom_head, 4)
View(auto_no_head)
View(auto_custom_head)
View(auto)
install.packages("XML")
# Directamente en la consola
# install.packages("XML")
library(XML)
url <- "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/cd_catalog.xml"
xmldoc <- xmlParse(xmldoc)
xmldoc <- xmlParse(url)
rootnode <- xmlRoot(xmldoc)
rootnode[1]
cds_data <- xmlSApply(rootnode, function(x), xmlSApply(x, xmlValue))
cds_data <- xmlSApply(rootnode, function(x) xmlSApply(x, xmlValue))
View(cds_data)
cds_catalog <- data.frame(t(cds_data), row.names = NULL)
View(cds_catalog)
head(cds_catalog, 2)
cds_catalog[1:5]
cds_catalog[1:5,]
View(auto)
# 18. Leyendo tablas incrustadas en un HTML
population_url <- "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/WorldPopulation-wiki.htm"
tablas <- readHTMLTable(population_url)
tablas <- readHTMLTable(population_url)
# Directamente en la consola
# install.packages("XML")
library(XML)
url <- "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/cd_catalog.xml"
xmldoc <- xmlParse(url)
rootnode <- xmlRoot(xmldoc)
rootnode[1]
cds_data <- xmlSApply(rootnode, function(x) xmlSApply(x, xmlValue))
cds_catalog <- data.frame(t(cds_data), row.names = NULL)
head(cds_catalog, 2)
cds_catalog[1:5,]
# 18. Leyendo tablas incrustadas en un HTML
population_url <- "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/WorldPopulation-wiki.htm"
tablas <- readHTMLTable(population_url)
View(tablas)
tablas[[6]]
most_populate <- tablas[[6]]
head(most_populate,3)
# leer solo una tabla del html
custom_table <- readHTMLTable(population_url, which = 6)
View(custom_table)
auto[3:5]
auto[,3:5]
auto[3:5,:]
auto[3:5]
auto[3,4,5]
auto(3,4,5)
auto[3:5,]
View(tablas)
type(tablas)
View(tablas)
View(tablas)
typeof(tablas)
install.packages("jsonlite")
library(jsonlite)
dat.1 <- fromJSON("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/students.json")
View(dat.1)
dat.2 <- fromJSON("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-courses.json")
View(dat.2)
url <- "http://finance.yahoo.com/webservice/v1/symbols/allcurrencies/quote?format=json"
currencies <- fromJSON(url)
install.packages("curl")
currencies <- fromJSON(url)
library(curl)
library(curl)
url <- "http://finance.yahoo.com/webservice/v1/symbols/allcurrencies/quote?format=json"
currencies <- fromJSON(url)
library(curl)
# la api de yahoo no esta funcionando
#url <- "http://finance.yahoo.com/webservice/v1/symbols/allcurrencies/quote?format=json"
url <- "http://www.floatrates.com/daily/usd.json"
currencies <- fromJSON(url)
View(currencies)
View(currencies)
# 22. Acceso a los datos con la sintaxis de $
currencies$eur
# 22. Acceso a los datos con la sintaxis de $
currencies$eur$rate
# 22. Acceso a los datos con la sintaxis de $
pesos <- currencies$ars
View(pesos)
# 22. Acceso a los datos con la sintaxis de $
pesos <- t(currencies$ars)
View(pesos)
View(pesos)
# 22. Acceso a los datos con la sintaxis de $
pesos <- currencies$ars
View(dat.1)
# 22. Acceso a los datos con la sintaxis de $
pesos <- currencies$
View(pesos)
# 22. Acceso a los datos con la sintaxis de $
pesos <- currencies$ars
View(pesos)
typeof(pesos)
currencies_df <- as.data.frame(currencies)
View(currencies_df)
currencies_df <- as.data.frame(currencies$ars)
View(currencies_df)
# cargamos libreria
library(jsonlite)
dat.1 <- fromJSON("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/students.json")
dat.2 <- fromJSON("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-courses.json")
library(curl)
# la api de yahoo no esta funcionando
#url <- "http://finance.yahoo.com/webservice/v1/symbols/allcurrencies/quote?format=json"
url <- "http://www.floatrates.com/daily/usd.json"
currencies <- fromJSON(url)
# 22. Acceso a los datos con la sintaxis de $
pesos <- currencies$ars
currencies_df <- as.data.frame(currencies$ars)
head(currencies,3)
head(dat.1,3)
dat.1$Email
currencies[1:5,]
currencies
typeof(currencies)
View(currencies)
View(cds_data)
currencies$currencies
data.frame(t(sapply(currencies, c)))
currencies_df <- data.frame(t(sapply(currencies, c)))
View(currencies_df)
dat.1[c(2,5,8)]
dat.1[c(2,5,8),]
dat.1[,c(2,5)]
dat.2
students_fwf <- read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf.txt",
widths = c(4, 15, 20, 15, 4))
View(students_fwf)
students_fwf <- read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf.txt",
widths = c(4, 15, 20, 15, 4),
col.names = c("id", "nombre", "email","carrera","a単o"))
View(students_fwf)
students_fwf_header <-  read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf-header.txt",
widths = c(4, 15, 20, 15, 4),
header = TRUE, sep = "\t",
skip = 2)
View(students_fwf_header)
source('C:/proyectos/r/curso_r/curso/Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/023 - Los ficheros de ancho fijo.R')
View(students_fwf)
View(students_fwf_header)
# ancho fijo conbecera y saltando dos filas e ignorando una columna
students_fwf_header <-  read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf-header.txt",
widths = c(4, 15, -20, 15, 4),
header = TRUE, sep = "\t",
skip = 2)
# ancho fijo conbecera y saltando dos filas
students_fwf_header <-  read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf-header.txt",
widths = c(4, 15, 20, 15, 4),
header = TRUE, sep = "\t",
skip = 2)
# ancho fijo conbecera y saltando dos filas e ignorando una columna
students_fwf_header <-  read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf-header.txt",
widths = c(4, 15, -20, 15, 4),
header = TRUE, sep = "\t",
skip = 2)
# ancho fijo sin cabecera e ignorando una columna
students_fwf <- read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf.txt",
widths = c(4, 15, -20, 15, 4),
col.names = c("id", "nombre","carrera","a単o"))
View(students_fwf)
# ancho fijo sin cabecera
students_fwf <- read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf.txt",
widths = c(4, 15, 20, 15, 4),
col.names = c("id", "nombre", "email","carrera","a単o"))
# ancho fijo conbecera y saltando dos filas
students_fwf_header <-  read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf-header.txt",
widths = c(4, 15, 20, 15, 4),
header = TRUE, sep = "\t",
skip = 2)
# ancho fijo sin cabecera e ignorando una columna
students_fwf <- read.fwf("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/student-fwf.txt",
widths = c(4, 15, -20, 15, 4),
col.names = c("id", "nombre","carrera","a単o"))
source('C:/proyectos/r/curso_r/curso/Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/023 - Los ficheros de ancho fijo.R')
clientes <- c("Juan Gabriel", "Abel Chiola", "Pedro")
fechas <- as.Date(c("2019-1-1","2018-12-1","2019-8-24"))
pago <- c(215,199.55,40.14)
pedidos <- data.frame(clientes,fechas,pago)
View(pedidos)
save(pedidos,"Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/pedidos.Rdata")
save(pedidos,"/Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/pedidos.Rdata")
save(pedidos,"Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/pedidos.Rdata")
getwd()
save(pedidos,"Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/pedidos.Rdata")
save(pedidos,file = "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/pedidos.Rdata")
saveRDS(pedidos,file = "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/pedidos.rds")
clientes_vip <- c("Juan Gabriel", "Abel Chiola")
save(pedidos, clientes_vip, file = "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/pedidos.Rdata")
remove(pedidos)
load("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/pedidos.Rdata")
View(pedidos)
#Cargamos el rds (no guarda la variable, solo los datos)
orders <- readRDS("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/pedidos.rds")
# Datasets que vienen con R
data(iris)
force(iris)
data(cars)
force(cars)
View(cars)
View(iris)
View(cars)
# Guardar todos los objetos de la session
save.image(file = "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/alldata.Rdata")
save(list = c("primes", "pow2"), file = "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/primes_and_pow2.Rdata")
#Otra forma de guardar variables
primes <- c(2, 3, 5, 7, 11, 13)
pow2 <- c(2, 4, 8, 16, 32, 64, 128)
save(list = c("primes", "pow2"), file = "Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/primes_and_pow2.Rdata")
# Cuando cargamos una variable y esta ya existe, por defecto no avisa si lo hacemos con load
# con attach si nos avisa
attach("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/primes_and_pow2.Rdata")
# Si queremos ver todos los paquetes y dataset que vienen, lo podemos hacer con
data()
data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/missing-data.csv")
View(data)
data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/missing-data.csv",
na.strings = "")
View(data)
# caso 2: omitimos los NA
data.clean <- na.omit(data)
View(data.clean)
# caso 3: is.na
# en el caso de que se aplique a un valor devuelve un bool
is.na(data[4,2])
# si se lo aplicamos a una matriz, nos devuelve una matriz de bools
is.na(data)
# 27. Limpieza selectiva de los datos sin valor
data[!is.na(data$Income),]
#
complete.cases(data)
data.clean.2 <- data[complete.cases(data),]
View(data.clean.2)
View(data.clean)
#convertir los 0 de ingresos en na
data$Income[data$Income==0]
#convertir los 0 de ingresos en na
data$Income[data$Income==0] <- NA
View(data)
# medidas de centralizacion y dispersion
mean(data$Income)
mean(data$Income, na.rm = TRUE) #de esta forma le indicamos que quite los NA del calculo
#lo mismo para otros funciones, como por ejemplo desviacion estandard
sd(data$Income)
sd(data$Income, na.rm = TRUE) # nos da NA
data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/missing-data.csv",
na.strings = "")
View(data)
# podriamos reemplazar los na con el promedio de la poblacion
data$Income.mean <- ifelse(
is.na(data$Income),
mean(data$Income, na.rm = TRUE),
data$Income)
View(data)
rand.input <- function(x) {
missing <- is.na(x)
n.missing <- sum(missing)
x.obs <- x[!missing]
imputed <- x
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return(imputed)
}
rand.impute <- function(x) {
missing <- is.na(x)
n.missing <- sum(missing)
x.obs <- x[!missing]
imputed <- x
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return(imputed)
}
dataframe[name] <- rand.impute(dataframe[,col])
random.impute.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols){
name <- paste(name[col], "imputed", sep = ".")
dataframe[name] <- rand.impute(dataframe[,col])
}
}
return(imputed)
imputed <- x
x.obs <- x[!missing]
rand.impute <- function(x) {
missing <- is.na(x)
n.missing <- sum(missing)
x.obs <- x[!missing]
imputed <- x
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return(imputed)
}
random.impute.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols){
name <- paste(name[col], "imputed", sep = ".")
dataframe[name] <- rand.impute(dataframe[,col])
}
}
data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/missing-data.csv",
na.strings = "")
random.impute.data.frame(data, c(1,2))
random.impute.data.frame <- function(dataframe, cols) {
name <- names(dataframe)
for(col in cols){
name <- paste(name[col], "imputed", sep = ".")
dataframe[name] <- rand.impute(dataframe[,col])
}
}
data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/missing-data.csv",
na.strings = "")
random.impute.data.frame(data, c(1,2))
View(data)
View(random.impute.data.frame)
View(data)
random.impute.data.frame(data, c(1,2))
View(data)
random.impute.data.frame <- function(dataframe, cols) {
name <- names(dataframe)
for(col in cols){
name <- paste(name[col], "imputed", sep = ".")
dataframe[name] <- rand.impute(dataframe[,col])
}
dataframe
}
data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/missing-data.csv",
na.strings = "")
random.impute.data.frame(data, c(1,2))
data.2 <- random.impute.data.frame(data, c(1,2))
View(data.2)
data$Income[data$Income == 0] <- NA
data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/missing-data.csv",
na.strings = "")
data$Income[data$Income == 0] <- NA
View(data)
data.2 <- random.impute.data.frame(data, c(1,2))
View(data.2)
data.2 <- random.impute.data.frame(data, c(1,2))
View(data.2)
family.size <- c(4, 3, 2, 2, 3, 4, 3)
family.salary <- c(40000, 60000, 50000, 80000, 60000, 70000, 60000)
familt.car <- c("Lujo", "Compacto", "Utilitario","Lujo", "Compacto", "Compacto", "Compacto")
family.car <- c("Lujo", "Compacto", "Utilitario","Lujo", "Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
unique(family)
#quitamos los duplicados (del mismo tipo)
family.unique <- unique(family)
#detectar los duplicados
duplicated(family)
#detectar los duplicados
family[duplicated(family)]
#detectar los duplicados
family[,duplicated(family)]
#detectar los duplicados
family[duplicated(family),]
# instalamos el paquete
install.packages("scales")
library(scales)
students <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/data-conversion.csv")
View(students)
students$Income.rescaled <- rescale(students$Income)
# lo que es lo mismo
(students$Income - min(students$Income)) / (max(students$Income) - min(students$Income))
#rescalamos entre 0 y 100
rescale(students$Income, to = 100)
#rescalamos entre 0 y 100
rescale(students$Income, to = c(0,100))
rescale.many <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos reescalado ", len(cols), " variable(s)"))
dataframe
}
students <- rescale.many(students,c(1,4))
rescale.many <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos reescalado ", length(cols), " variable(s)"))
dataframe
}
students <- rescale.many(students,c(1,4))
housing <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/BostonHousing.csv")
View(housing)
#esta funcion deben ser todas las variables numericas
housing.z <- scale(housing)
View(housing.z)
housing.none <- scale(housing, center = FALSE, scale = FALSE) # por defecto es asi
View(housing.none)
housing.mean <- scale(housing, center = TRUE, scale = FALSE) # por defecto es asi
View(housing.mean)
housing.sd <- scale(housing, center = FALSE, scale = TRUE)
View(housing.sd)
names["a", "b"]
scale.many <- function(dataframe, cols) {
names <- names[dataframe]
for(col in cols) {
name <- paste(name[cols], "z", sep = ".")
dataframe[name] <- scale(dataframe[,col])
}
cat(paste("Hemos normalizado ", length(cols), " variable(s)"))
dataframe
}
housing.2 <- scale.many(housing, c(1, 3, 5:8))
scale.many <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(name[cols], "z", sep = ".")
dataframe[name] <- scale(dataframe[,col])
}
cat(paste("Hemos normalizado ", length(cols), " variable(s)"))
dataframe
}
housing.2 <- scale.many(housing, c(1, 3, 5:8))
scale.many <- function(dataframe, cols) {
names <- names(dataframe)
for(col in cols) {
name <- paste(names[cols], "z", sep = ".")
dataframe[name] <- scale(dataframe[,col])
}
cat(paste("Hemos normalizado ", length(cols), " variable(s)"))
dataframe
}
housing.2 <- scale.many(housing, c(1, 3, 5:8))
View(housing.2)
students <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/data-conversion.csv")
View(students)
#comenzamos con la variable income
#la vamos a convertir a categorica
bp <- c(-Inf, 10000, 31000, Inf)
names <- c("Low", "Average", "High")
students$Income.cat <- cut(students$Income, breaks = bp, labels = names)
#sino indicamos etiquetas.. se le asigna
students$Income.cat <-2 cut(students$Income, breaks = bp)
#sino indicamos etiquetas.. se le asigna
students$Income.cat2 <- cut(students$Income, breaks = bp)
#Cortes hechos por R
students$Income.cat3 <- cut(students$Income, breaks = 4, labels = c("L1", "L2", "L3", "L4"))
students$Income.cat4 <- cut(students$Income, breaks = 4)
students <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/data-conversion.csv")
install.packages("dummies")
library(dummies)
View(students)
students.dummy <- dummy.data.frame(students, sep = ".")
library(dummies)
students.dummy <- dummy.data.frame(students, sep = ".")
View(students.dummy)
# Solo una columna
dummy(students$State, sep = ".")
#varias columnas
dummy.data.frame(students, names = c("State","Gender"),sep = ".")
housing.data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/housing-with-missing-value.csv")
View(housing.data)
housing.data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/housing-with-missing-value.csv",
stringsAsFactors = FALSE)
# resumen
summary(housing.data)
# omitirlos
housing.data.1 <- na.omit(housing.data)
View(housing.data.1)
summary(housing.data.1)
#Eliminar los NA de ciertas columnas
drop_na <- c("rad") #rad es el nombre de la columna
housing.data.2 <- housing.data[complete.cases(housing.data[,!(names(housing.data))%in% drop_na]),]
View(housing.data.2)
summary(housing.data.2)
##Podemos eliminar una columna completa
housing.data$rad <- NULL
summary(housing.data)
housing.data <- read.csv("Seccion 03 - Adquirir y preparar nuestros ingredientes - Los Datos/housing-with-missing-value.csv",
stringsAsFactors = FALSE)
housing.data.3 <- housing.data[,!(names(housing.data) %in% drops)]
#Volvemos a cargar
#Eliminamos varias columnas
drops <- c("rad","ptratio")
housing.data.3 <- housing.data[,!(names(housing.data) %in% drops)]
View(housing.data.3)
summary(housing.data.3)
