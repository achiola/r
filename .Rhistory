betweenness(bg,"u3")
edge.betweenness(bg)
closeness(g)
#### 160. Añadir y quitar nodos y aristas en un grafo
E(g)
E(dg)
neighbors(g, 1)
neighbors(bg, "u1")
neighbors(bg, "g1")
V(bg)$name
V(bg)$name[neighbors(bg, "g1")]
neighborhood(g, 1, 1)
neighborhood(g, 1, 2)
neighborhood(g, 2, 1)
#agregar un nodo
new.g <- g + vertex(27)
plot.igraph(g)
plot.igraph(new.g)
#agregar un nodo
new.g <- g + vertex(27, 28)
plot.igraph(new.g)
#agregar arista
new.g <- new.g + edge(27,1)
plot.igraph(new.g)
new.g <- new.g + edge(27,28)
plot.igraph(new.g)
#agregar un nodo
new.g <- g + vertex(27, 28, 29, 30, 31)
plot.igraph(new.g)
#agregar arista
new.g <- new.g + edge(27,1)
new.g <- new.g + edge(27,28)
plot.igraph(new.g)
#borrar los de grado 0 (aislados)
new.g <- delete.vertices(new.g, V(new.g)[degree(new.g)==0])
plot.igraph(new.g)
#subgrafos inducidos
sub.g <- induced.subgraph(g, c(3, 6, 9, 15, 21))
plot.igraph(sub.g)
#subgrafos inducidos
sub.g <- induced.subgraph(g, c(3, 6, 8, 9, 15, 21))
plot.igraph(sub.g)
load("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/tweets-from-monetization.Rdata")
View(tweets_graph)
View(tweets_graph)
View(tweets_graph)
install.packages(c("backports", "BH", "BiocManager", "boot", "broom", "callr", "car", "carData", "caTools", "cli", "ClusterR", "covr", "curl", "data.table", "DBI", "dendextend", "digest", "DT", "e1071", "factoextra", "FactoMineR", "forecast", "foreign", "fracdiff", "geometry", "ggpubr", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "jomo", "jpeg", "kernlab", "KernSmooth", "knitr", "later", "latticeExtra", "maptools", "MASS", "mgcv", "mice", "mime", "modeest", "nlme", "OpenImageR", "openxlsx", "ordinal", "pillar", "pkgbuild", "plot3D", "plyr", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "RgoogleMaps", "rlang", "roxygen2", "RSQLite", "rversions", "scales", "shiny", "sp", "SparseM", "statip", "survival", "testthat", "TTR", "vctrs", "visNetwork", "xfun"))
tinytex::install_tinytex()
install.packages("tinytex")
install.packages("tinytex")
unlink('Seccion 12 - Informes/165 R markdown_cache', recursive = TRUE)
unlink('Seccion 12 - Informes/165_Markdown_cache', recursive = TRUE)
rmarkdown::render("Seccion 12 - Informes/165_Markdown.Rmd", "pdf_document")
rmarkdown::render("Seccion 12 - Informes/165_Markdown.Rmd", "beemer_presentation")
rmarkdown::render("Seccion 12 - Informes/165_Markdown.Rmd", "beamer_presentation")
rmarkdown::render("Seccion 12 - Informes/165_Markdown.Rmd", "ioslides_presentation")
install.packages("kableExtra")
install.packages("kableExtra")
shiny::runApp('Seccion 12 - Informes/introShinyWebApp')
shiny::runApp('Seccion 12 - Informes/introShinyWebApp')
library(htmltools)
detach("package:htmltools", unload = TRUE)
library(htmltools)
install.packages("htmltools")
shiny::runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
View(auto)
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp()
runApp('Seccion 12 - Informes/introShinyWebApp')
View(auto)
View(auto)
View(auto)
runApp('Seccion 12 - Informes/introShinyWebApp')
shiny::runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp()
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp()
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/CondicionalUI')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
paste(names.first, names.last)
names.first <- c("Abel German", "Juan", "Gabriel", "Sansa")
names.last <- c("Chiola", "Perez", "Gonzalez", "Stark")
paste(names.first, names.last)
single.surname <- c("Spina")
paste(names.first, single.surname)
single.surname <- c("Spina", "Otro")
paste(names.first, single.surname)
username <- function(first, last){
tolower(paste0(last, substr(first,1, 1)))
}
username('abel', 'chiola')
username(names.first, names.last)
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv")
head(auto)
auto$dmpg <- auto$mpg*2
head(auto)
auto$kmpg <- auto$mpg * 1.609
head(auto)
sum(auto$mpg)
min(auto$mpg)
max(auto$mpg)
range(auto$mpg)
prod(auto$mpg)
mean(auto$mpg)
median(auto$mpg)
var(auto$mpg)
sd(auto$mpg)
## normalizar
(auto$mpg - mean(auto$mpg))/sd(auto$mpg)
m <- matrix(seq(1,16),4,4)
m
#minimo de cada fila
apply(m, 1, min)
#minimo de cada columna
apply(m, 2, min)
####producto
##fila
apply(m, 1, prod)
#columna
apply(m, 2, prod)
#aplicar tanto a filas como columnas
apply(m, c(1,2), function(x){x:x^2})
#aplicar tanto a filas como columnas
apply(m, c(1,2), function(x){x^2})
#parametros de una fx
apply(m, 1, quantile, probs = c(0.40, 0.60, 0.80))
## operaciones especificas de matrices
colSums(m)
rowsum(m)
rowSum(m)
rowsSum(m)
rowSums(m)
colMeans(m)
#Operaciones con array
array2D <- array(seq(1,32), dim = c(4,4,2))
array2D
#Operaciones con array
array3D <- array(seq(1,32), dim = c(4,4,2))
array3D
apply(array3D, 3, sum)
apply(array3D, 1, min)
apply(array3D, c(1,3), min)
apply(array3D, c(1,2), sum)
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv")
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv",
stringsAsFactors = F)
x <- c(1,2,3)
x
lapply(x, sqrt)
x <- list(a=1:10,
b=c(1,10,100,1000),
c=seq(5,50,by = 5))
x
lapply(x, mean)
x_con_lapply <- lapply(x, mean)
class(x_con_lapply)
x_con_sapply <- sapply(x, mean)
class(x_con_sapply)
x_con_sapply
lapply(auto[,2:8], min)
sapply(auto[,2:8], min)
sapply(auto[,2:8], summary)
sapply(auto[,2:8], range)
# sapply devuelve la misma clase que el inputo
sapply(auto[,2:8], min)
sapply(auto[,2], min)
sapply(auto[,2:2], min)
sapply(as.data.frame(auto[,2]), min)
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv",
stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3C","4C","5C","6C","8C"))
tapply(auto$mpg, auto$cylinders, mean)
#multiples factores
tapply(auto$mpg, list(cyl = auto$cylinders), mean)
by(auto, auto$cylinders, function(row){cor(row$mpg, row#acceleration)})
by(auto, auto$cylinders, function(row){cor(row$mpg, row$acceleration)})
View(auto)
by(auto, auto$cylinders,
function(row){ cor(row$mpg, row$acceleration)} )
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv",
stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3C","4C","5C","6C","8C"))
y
# d = data.frame
# l = list
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv",
stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3C","4C","5C","6C","8C"))
install.packages("plyr")
#install.packages("plyr")
library(plyr)
View(auto)
ddply(auto, "cylinders",
function(df){mean(df$mpg)})
ddply(auto, ~cylinders,
function(df){mean(df$mpg)})
ddply(auto, c("cylinders","model_year"),
function(df){
c(mean = mean(df$mpg),
min = min(df$mpg),
max = max(df$mpg))
})
ddply(auto, .(cylinders), summarize, freq = length(cylinders), meanmpg = mean(mpg))
par(mfrow=c(1,2))
d_ply(auto, "cylinders", summarize,
hist(mpg, xlab = "Millas por galeon", main="Histograma", breaks = 5))
par(mfrow=c(3,2))
d_ply(auto, "cylinders", summarize,
hist(mpg, xlab = "Millas por galeon", main="Histograma", breaks = 5))
d_ply(auto, "cylinders", summarise,
hist(mpg, xlab = "Millas por galeon", main="Histograma", breaks = 5))
d_ply(auto, "cylinders", summarise,
hist(mpg, xlab = "Millas por galeon", main="Histograma", breaks = 5))
d_ply(auto, "cylinders", summarise,
hist(mpg, xlab = paste("Millas por galeon",cylinders), main="Histograma", breaks = 5))
d_ply(auto, "cylinders", summarise,
hist(mpg, xlab = paste("Millas por galeon - ",cylinders), main="Histograma", breaks = 5))
par(mfrow=c(3,2))
d_ply(auto, "cylinders", summarise,
hist(mpg, xlab = paste("Millas por galeon - ",cylinders), main="Histograma", breaks = 5))
d_ply(auto, "cylinders", summarise,
hist(mpg, xlab = "Millas por galeon", main=paste("Histograma - ",cylinders), breaks = 5))
d_ply(auto, "cylinders", summarise,
hist(mpg, xlab = "Millas por galeon", main="Histograma", breaks = 5))
par(mfrow=c(3,2))
d_ply(auto, "cylinders", summarise,
hist(mpg, xlab = "Millas por galeon", main="Histograma", breaks = 5))
autos <- list(auto, auto)
auto.big <- ldply(autos, I)
mat <- matrix(seq(1,9),3,3)
apply(mat,1,min)
apply(mat,1,sum)
x <- list(a = 1, b=1:5, c=10:50)
x
lapply(x, FUN = length())
lapply(x, FUN = length
lapply(x, FUN = length)
x
lapply(x, FUN = length)
sapply(x, FUN = length)
mapply(sum, 1:5, 1:10, 1:20, 1:100)
y <- factor(rep(letters[1:5], each = 5))
y
tapply(x, y, sum)
x <- 1:25
y <- factor(rep(letters[1:5], each = 5))
y
tapply(x, y, sum)
install.packages("dplyr")
#install.packages("dplyr")
library(dplyr)
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv",
stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3C","4C","5C","6C","8C"))
#subconunto
subset.auto <- select(auto, mpg, horsepower, acceleration)
head(subset.auto)
#filter - where
auto.80 <- filter(auto,model_year >= 80)
head(auto)
View(auto.80)
head(auto.80)
#nueva variable
mutate(auto,mpg.norm = round((mpg - mean(mpg))/sd(mpg)),2)
#nueva variable
auto.norm <- mutate(auto,mpg.norm = round((mpg - mean(mpg))/sd(mpg),2))
head(auto.norm)
#agrupaciones
summarise(group_by(auto$cylinders),mean(mpg))
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv",
stringsAsFactors = F)
#agrupaciones
summarise(group_by(auto$cylinders),mean(mpg))
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3C","4C","5C","6C","8C"))
#agrupaciones
summarise(group_by(auto$cylinders),mean(mpg))
#agrupaciones
summarise(group_by(auto, cylinders),mean(mpg))
summarise(group_by(auto, model_year),mean(mpg))
#operador pipe %>%
auto %>%
filter(model_year < 78) %>%
group_by(cylinders) %>%
summarise(mean(mpg))
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv",
stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3C","4C","5C","6C","8C"))
install.packages("data.table")
#install.packages("data.table")
library(data.table)
auto.dt <- data.table(auto)
View(auto.dt)
class(auto.dt)
auto.dt$mpg
auto.dt[, .(mpg)]
auto.dt[, .(mpg, horsepower, acceleration)]
auto.dt[cylinders %in% c("3C","5C")]
auto.dt[cylinders %in% c("3C","5C")]
auto.dt[cylinders == "4C" & horsepower>100]
auto.dt[marca %like% 'mazda']
auto.dt[car_name %like% 'mazda']
auto.dt[,mean(mpg), by=cylinders]
auto.dt[,mean_pgm := mean(mpg), by=cylinders]
head(auto.dt)
auto.dt[,c("sd_mpg","Z_mpg") := list(
sd(mpg),
round((mpg - mean(mpg))/sd(mpg),2)),
by = cylinders]
head(auto.dt)
auto.dt[, lapply(.SD, mean),.SDCols = c("mpg","horsepower")]
auto.dt[, lapply(.SD, mean), .SDCols = c("mpg","horsepower")]
auto.dt[, lapply(.SD, mean),
.SDcols = c("mpg","horsepower")]
# para que devuelva un data.frame (en vez de un data.table)
auto.dt[1:5, c(1:3,9:12)]
# para que devuelva un data.frame (en vez de un data.table)
class(auto.dt[1:5, c(1:3,9:12)])
class(auto.dt[1:5, c(1:3,9:12), with = F])
class(auto.dt[1:5, c(1:3,9:12), with = FALSE])
# establecer la clave
setkey(auto.dt, cylinders)
tables()
auto.dt["4C",c(1:3,9:10), with = F]
auto.dt[,list(mean = mean(mpg),
min = min(mpg),
max = max(mpg),
sd = sd(mpg))]
auto.dt[,list(mean = mean(mpg),
min = min(mpg),
max = max(mpg),
sd = sd(mpg)),
by = cylinders]
# establecer multiples claves
setkeyv(auto.dt,c(cylinders,model_year))
# establecer multiples claves
setkeyv(auto.dt,c("cylinders","model_year"))
tables()
auto.dt[.("4C"),c(1:3,9:10), with = F]
auto.dt["4C",c(1:3,9:10), with = F]
auto.dt[.("4C"),c(1:3,9:10), with = F]
auto.dt["4C",c(1:3,9:10), with = F]
auto.dt[.("4C"),c(1:3,9:10), with = T]
auto <- read.csv("Seccion 13 - Soluciones eficientes en R/auto-mpg.csv",
stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3C","4C","5C","6C","8C"))
auto.dt(,.N, by = cylinders)
library(data.table)
auto.dt <- data.table(auto)
auto.dt(,.N, by = cylinders)
auto.dt(,.N, by = cylinders)
auto.dt( , .N, by = cylinders)
auto.dt[ , .N, by = cylinders]
setkeyv(auto.dt,c("cylinders","model_year"))
auto.dt[ , .N, by = cylinders]
auto.dt["3C", .N]
auto.dt[,mean_pgm := mean(mpg), by=cylinders]
head()
head(auto.dt)
auto.dt[,mean_pgm := NULL]
head(auto.dt)
# joins
empl <- read.csv("Seccion 13 - Soluciones eficientes en R/employees.csv",
stringsAsFactors = F)
head(empl)
dept <- read.csv("Seccion 13 - Soluciones eficientes en R/departments-1.csv",
stringsAsFactors = F)
head(dept)
#pasamos a dt
empl.dt <- data.table(empl)
dept.dt <- data.table(dept)
setkey(empl.dt, "DeptId")
#como es la primer columna de la tabla dept no hace falta crear la key
combine <- empl.dt[dept.dt]
head(combine)
# error cuando la cantidad de registros es superior al tamaño de cualquier de los dos dt
dept2 <- read.csv("Seccion 13 - Soluciones eficientes en R/departments-2.csv",
stringsAsFactors = F)
dept2.dt <- data.table(dept2)
combine2 <- empl.dt[dept2.dt]
head(combine2)
View(combine2)
#inner join
combine2_inner <- empl.dt[dept2.dt, nomatch = 0]
#merge
merge(empl.dt, dept2.dt,
by = "DeptID")
#merge
merge(empl.dt, dept2.dt,
by = "DeptId")
merge(empl.dt, dept2.dt,
by = "DeptId",
all.x = T) #left join
merge(empl.dt, dept2.dt,
by = "DeptId",
all.y = T) #right join
merge(empl.dt, dept2.dt,
by = "DeptId",
all.x = T,
all.y = T) #outter join
merge(empl.dt, dept2.dt,
by = "DeptId",
all = T) #outter join
# sueldo maximo por cada departamento
empl.dt[dept.dt,
max(.SD),
by = .EACHI,
.SDcols = "Salary"]
empl2.dt[dept.dt,
max(.SD),
by = .EACHI,
.SDcols = "Salary"]
empl.dt[dept2.dt,
max(.SD),
by = .EACHI,
.SDcols = "Salary"]
#Sueldo promedio por depto
empl.dt[,
.(AvgSalary = lapply(.SD, mean)),
by = "DeptId",
.SDcols = "Salary"]
empl.dt[dept2.dt,
list(DeptName, AvgSalary = lapply(.SD, mean)),
by = .EACHI,
.SDcols = "Salary"]
library(RgoogleMaps)
#-32.754211, -63.790825
lat <- -32.754211
lon <- -63.790825
miMapa <- GetMap(center = c(lat, lon), zoom = 17)
PlotOnStaticMap(miMapa)
miMapa <- GetMap(center = c(lat, lon), zoom = 10)
PlotOnStaticMap(miMapa)
miMapa <- GetMap(center = c(lat, lon), zoom = 14)
PlotOnStaticMap(miMapa)
miMapa <- GetMap(center = c(lat, lon), zoom = 14,
destfile = "Seccion 14 - Datos geoespaciales/mimapa.jpeg")
PlotOnStaticMap(miMapa)
miMapa <- GetMap(center = c(lat, lon), zoom = 14,
destfile = "Seccion 14 - Datos geoespaciales/mimapa.jpeg",
format = "jpeg")
PlotOnStaticMap(miMapa)
miMapa <- GetMap(center = c(lat, lon), zoom = 14,
destfile = "Seccion 14 - Datos geoespaciales/mimapa.jpeg",
format = "jpeg",
maptype = "satellite")
PlotOnStaticMap(miMapa)
miMapa <- GetMap(center = c(lat, lon), zoom = 14,
#destfile = "Seccion 14 - Datos geoespaciales/mimapa.jpeg",
#format = "jpeg",
maptype = "satellite")
PlotOnStaticMap(miMapa)
PlotOnStaticMap(miMapa)
miMapa <- GetMap(center = c(lat, lon), zoom = 14,
#destfile = "Seccion 14 - Datos geoespaciales/mimapa.jpeg",
#format = "jpeg",
maptype = "satellite")
PlotOnStaticMap(miMapa)
miMapa <- GetMap(center = c(lat, lon), zoom = 14,
destfile = "Seccion 14 - Datos geoespaciales/mimapa.jpeg",
format = "jpeg",
maptype = c("satellite"))
PlotOnStaticMap(miMapa)
PlotOnStaticMap(miMapa)
#-32.754211, -63.790825
lat <- -32.754211
lon <- -63.790825
#jpeg png pdf
miMapa <- GetMap(center = c(lat, lon), zoom = 14,
destfile = "Seccion 14 - Datos geoespaciales/mimapa.jpeg",
format = "jpeg",
maptype = "satellite")
PlotOnStaticMap(miMapa)
#jpeg png pdf
miMapa <- GetMap(center = c(lat, lon), zoom = 14,
destfile = "Seccion 14 - Datos geoespaciales/mimapa.jpeg",
format = "jpeg",
maptype = "hybrid")
PlotOnStaticMap(miMapa)
