library(jsonlite)
hikin.data <- fromJSON("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/hiking-ny.json")
hiking.data <- fromJSON("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/hiking-ny.json")
hiking.groups <- hikin.data$results
View(hiking.groups)
meetup.getUsers <- function(groups, api_key){
users <- as.data.frame(NULL)
for (i in 1:nrow(groups)) {
url <- paste0("https://api.meetup.com/2/members?group_id=", groups$id[i],
"&only=id&key=",api_key)
while (url!= "") {
temp_json <- fromJSON(RCurl::httpGET(url))
if(class(temp_json$results) == "data.frame"){
tests <- cbind(group_id=groups$id[i],member_id=temp_json$results)
users <- rbind(users,tests)
}
url <- temp_json$meta$`next`
}
print(paste0("Hemos recuprado los miembros del grupo ",i))
}
u <- data.frame(group_id = users$group_id, user_id = users$id)
u
}
api_key = ""
hiking.members <- meetup.getUsers(hiking.groups, api_key)
library(data.table)
users <- setDT(hiking.members)[,.SD[.N > 5], by user_id]
install.packages("Matrix")
library(Matrix)
load("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/meetup-hiking.Rdata")
View(users)
unique(users$user_id)
unique(users$group_id)
group_membership <- sparseMatrix(users$group_id, users$user_id, x=T)
#matriz de adyacencia
#si usuario A y usuario B comparten 3 grupos, entonces ese es el dato que se guarda
#en la interseccion
adjacency <- t(group_membership) %*% group_membership
summary(adjacency)
#armamos una matriz de aristas
user_edgelist <- as.data.frame(summary(adjacency))
View(user_edgelist)
summary(user_edgelist)
user_edgelist.upper <- user_edgelist[user_edgelist$i < user_edgelist$j,]
View(user_edgelist.upper)
save(user_edgelist.upper, file="Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/meetup-hiking-edgelist.Rdata")
install.packages("igraph")
library(igraph)
load("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/meetup-hiking-edgelist.Rdata")
#vamos a filtrar un poco para poder graficar
user_edgelist.filtered <- user_edgelist.upper[user_edgelist.upper$x > 15]
#vamos a filtrar un poco para poder graficar
user_edgelist.filtered <- user_edgelist.upper[user_edgelist.upper$x > 15, ]
head(user_edgelist.filtered)
#cambiamos los id de los usuarios, solo para que sea mas legible
uids <- unique(c(user_edgelist.filtered$i,user_edgelist.filtered$j))
i <- match(user_edgelist.filtered$i, uids)
j <- match(user_edgelist.filtered$j, uids)
new.graph <- data.frame(i, j, x = user_edgelist.filtered$x)
View(new.graph)
#ahora si graficamos
g <- graph.data.frame(new.graph,
directed = F)
#ahora si graficamos
g <- graph.data.frame(new.graph,
directed = F)
#ahora si graficamos
g <- graph.data.frame(new.graph,
directed = F)
#ahora si graficamos
g <- graph.data.frame(new.graph,
directed = F)
#ahora si graficamos
g <- graph.data.frame(new.graph,
directed = F)
library(igraph)
#ahora si graficamos
g <- graph.data.frame(new.graph,
directed = F)
g
plot.igraph(g, vertex.size = 15)
plot.igraph(g, vertex.size = 20)
save(g,"Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/meetup-hiking-graph.Rdata")
save(g,"Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/meetup-hiking-graph.Rdata")
save(g, file = "Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/meetup-hiking-graph.Rdata")
#con otros layouts
plot.igraph(g,
layout = layout.circle,
vertex.size = 20)
plot.igraph(g,
edge.curved = T,
vertex.color = "pink",
edge.color = "blue",
layout = layout.circle,
vertex.size = 20)
plot.igraph(g,
edge.curved = T,
vertex.color = "pink",
edge.color = "blue",
vertex.size = 20)
V(g)$size = degree(g) * 4
plot.igraph(g,
edge.curved = T,
vertex.color = "pink",
edge.color = "blue",
vertex.size = 20)
V(g)$size = degree(g) * 4
plot.igraph(g,
edge.curved = T,
vertex.color = "pink",
edge.color = "blue",
vertex.size = 20)
v(g)$size = degree(g) * 4
plot.igraph(g,
edge.curved = T,
vertex.color = "pink",
edge.color = "blue",
vertex.size = 20)
View(g)
#ahora si graficamos
g <- graph.data.frame(new.graph,
directed = F)
g
V(g)$size = degree(g) * 4
g
plot.igraph(g,
edge.curved = T,
vertex.color = "pink",
edge.color = "blue",
vertex.size = 20)
V(g)$size = degree(g)*4
plot.igraph(g,
edge.curved = T,
vertex.color = "pink",
edge.color = "blue",
vertex.size = 20)
V(g)$size = degree(g)*4
plot.igraph(g,
edge.curved = T,
vertex.color = "pink",
edge.color = "blue",
vertex.size = 20)
plot.igraph(g,
edge.curved = T,
vertex.color = "pink",
edge.color = "blue")
color <- ifelse(degree(g) >= 5, "red", "blue")
size <- degree(g)*4
plot.igraph(g,
vertex.label = NA,
layout = layout.fruchterman.reingold,
vertex.color = color,
vertex.size = size)
E(g)$x
plot.igraph(g,
edge.curved = T,
edge.color = "black",
edge.width = (E(g)-min(E(g))+1))
plot.igraph(g,
edge.curved = T,
edge.color = "black",
edge.width = (E(g)-min(E(g))+1)/3)
plot.igraph(g,
edge.curved = T,
edge.color = "black",
edge.width = (E(g)-min(E(g))+1)/5)
## Grafo dirigido
gd <- graph.data.frame(new.graph,
directed = T)
plot.igraph(gd,
edge.curved = T,
edger.color = "black",
vertex.label.cex = 0.5,
)
plot.igraph(gd,
edge.curved = T,
edger.color = "black",
vertex.label.cex = 0.5)
plot.igraph(gd,
edge.curved = T,
edger.color = "black",
vertex.label.cex = 0.5,
edge.width = 1)
plot.igraph(gd,
edge.curved = T,
edger.color = "black",
vertex.label.cex = 0.5,
edge.width = 0)
library(igraph)
load("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/meetup-hiking-edgelist.Rdata")
#vamos a filtrar un poco para poder graficar
user_edgelist.filtered <- user_edgelist.upper[user_edgelist.upper$x > 15, ]
head(user_edgelist.filtered)
#cambiamos los id de los usuarios, solo para que sea mas legible
uids <- unique(c(user_edgelist.filtered$i,user_edgelist.filtered$j))
i <- match(user_edgelist.filtered$i, uids)
j <- match(user_edgelist.filtered$j, uids)
new.graph <- data.frame(i, j, x = user_edgelist.filtered$x)
## Grafo dirigido
gd <- graph.data.frame(new.graph,
directed = T)
plot.igraph(gd,
edge.curved = T,
edger.color = "black",
vertex.label.cex = 0.5,
edge.width = 0)
wg <- graph.data.frame(new.graph.w, directed = F)
wg
wg <- graph.data.frame(new.graph.w, directed = F)
## Grafo dirigido
gd <- graph.data.frame(new.graph,
directed = T)
# Grafo con pesos en las aristas
new.graph.w <- new.graph
names(new.graph.w) <- c('i','j','weigth')
wg <- graph.data.frame(new.graph.w, directed = F)
wg
names(new.graph.w) <- c('i','j','weight')
wg <- graph.data.frame(new.graph.w, directed = F)
wg
plot.igraph(wg)
plot.igraph(gd,
edge.curved = T,
edger.color = "black",
vertex.label.cex = 0.5,
edge.width = 0)
plot.igraph(wg)
plot.igraph(wg, edge.label = E(wd)$weight)
E(wd)$weight
E(wg)$weight
plot.igraph(wg, edge.label = E(wg)$weight)
#obtener la matriz de adyacencia de un grafo
get.adjacency(g, type = "upper")
get.adjacency(g, type = "lower")
get.adjacency(g, type = "both")
get.adjacency(g, type = "both", attr = "x")
#obtener lista de arista de un grafo
get.data.frame(g)
get.data.frame(g, "vertices")
V(g)$size = degree(g)
get.data.frame(g, "vertices")
get.data.frame(g, "edges")
get.data.frame(g, "both")
#grafo bipartito
g1 <- rbinom(10,1,0.5)
g2 <- rbinom(10,1,0.5)
g3 <- rbinom(10,1,0.5)
g4 <- rbinom(10,1,0.5)
membership <- data.frame(g1,g2,g3,g4)
g5 <- rbinom(10,1,0.5)
membership <- data.frame(g1,g2,g3,g4,g5)
View(membership)
names(membership)
rownames(membership)
rownames(membership) <- c("u1","u2","u3","u4","u5","u6","u7","u8","u9","u10")
bg <- graph.incidence(membership)
View(bg)
bg
V(bg)$type
V(bg)$names
V(bg)$name
layout <- layout.bipartite(bg)
plot(bg,
layout = layout,
vertex.size = 15)
#proyeccion de un grafo bipartito
p <- bipartite.projection(bg)
p
plot(p$proj1)
plot(p$proj2)
plot(p$proj1)
plot(p$proj2)
library(igraph)
load("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/bipartite-graph.Rdata")
load("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/meetup-hiking-d-graph.Rdata")
load("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/meetup-hiking-graph.Rdata")
degree(g)
plot.igraph(g)
degree(dg)
plot.igraph(dg)
degree(bg)
plot.igraph(bg)
plot.igraph(bg, layout = layout.bipartite)
degree(bg, "g3")
degree(dg, 15, mode = "in")
degree(dg, 15, mode = "out")
degree(dg, 15)
degree.distribution(bg)
degree.distribution(dg)
options(digits = 3)
degree.distribution(bg)
degree.distribution(dg)
betweenness(g)
plot.igraph(g)
plot.igraph(bg, layout = layout.bipartite)
betweenness(bg)
betweenness(bg,"u3")
edge.betweenness(bg)
closeness(g)
#### 160. Añadir y quitar nodos y aristas en un grafo
E(g)
E(dg)
neighbors(g, 1)
neighbors(bg, "u1")
neighbors(bg, "g1")
V(bg)$name
V(bg)$name[neighbors(bg, "g1")]
neighborhood(g, 1, 1)
neighborhood(g, 1, 2)
neighborhood(g, 2, 1)
#agregar un nodo
new.g <- g + vertex(27)
plot.igraph(g)
plot.igraph(new.g)
#agregar un nodo
new.g <- g + vertex(27, 28)
plot.igraph(new.g)
#agregar arista
new.g <- new.g + edge(27,1)
plot.igraph(new.g)
new.g <- new.g + edge(27,28)
plot.igraph(new.g)
#agregar un nodo
new.g <- g + vertex(27, 28, 29, 30, 31)
plot.igraph(new.g)
#agregar arista
new.g <- new.g + edge(27,1)
new.g <- new.g + edge(27,28)
plot.igraph(new.g)
#borrar los de grado 0 (aislados)
new.g <- delete.vertices(new.g, V(new.g)[degree(new.g)==0])
plot.igraph(new.g)
#subgrafos inducidos
sub.g <- induced.subgraph(g, c(3, 6, 9, 15, 21))
plot.igraph(sub.g)
#subgrafos inducidos
sub.g <- induced.subgraph(g, c(3, 6, 8, 9, 15, 21))
plot.igraph(sub.g)
load("Seccion 11 - Conexiones por doquier - Análisis de Redes Sociales/tweets-from-monetization.Rdata")
View(tweets_graph)
View(tweets_graph)
View(tweets_graph)
install.packages(c("backports", "BH", "BiocManager", "boot", "broom", "callr", "car", "carData", "caTools", "cli", "ClusterR", "covr", "curl", "data.table", "DBI", "dendextend", "digest", "DT", "e1071", "factoextra", "FactoMineR", "forecast", "foreign", "fracdiff", "geometry", "ggpubr", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "jomo", "jpeg", "kernlab", "KernSmooth", "knitr", "later", "latticeExtra", "maptools", "MASS", "mgcv", "mice", "mime", "modeest", "nlme", "OpenImageR", "openxlsx", "ordinal", "pillar", "pkgbuild", "plot3D", "plyr", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "RgoogleMaps", "rlang", "roxygen2", "RSQLite", "rversions", "scales", "shiny", "sp", "SparseM", "statip", "survival", "testthat", "TTR", "vctrs", "visNetwork", "xfun"))
tinytex::install_tinytex()
install.packages("tinytex")
install.packages("tinytex")
unlink('Seccion 12 - Informes/165 R markdown_cache', recursive = TRUE)
unlink('Seccion 12 - Informes/165_Markdown_cache', recursive = TRUE)
rmarkdown::render("Seccion 12 - Informes/165_Markdown.Rmd", "pdf_document")
rmarkdown::render("Seccion 12 - Informes/165_Markdown.Rmd", "beemer_presentation")
rmarkdown::render("Seccion 12 - Informes/165_Markdown.Rmd", "beamer_presentation")
rmarkdown::render("Seccion 12 - Informes/165_Markdown.Rmd", "ioslides_presentation")
install.packages("kableExtra")
install.packages("kableExtra")
shiny::runApp('Seccion 12 - Informes/introShinyWebApp')
shiny::runApp('Seccion 12 - Informes/introShinyWebApp')
library(htmltools)
detach("package:htmltools", unload = TRUE)
library(htmltools)
install.packages("htmltools")
shiny::runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
View(auto)
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp()
runApp('Seccion 12 - Informes/introShinyWebApp')
View(auto)
View(auto)
View(auto)
runApp('Seccion 12 - Informes/introShinyWebApp')
shiny::runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp()
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp()
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/introShinyWebApp')
runApp('Seccion 12 - Informes/CondicionalUI')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
runApp('Seccion 12 - Informes/DynamicReportGeneration')
paste(names.first, names.last)
names.first <- c("Abel German", "Juan", "Gabriel", "Sansa")
names.last <- c("Chiola", "Perez", "Gonzalez", "Stark")
paste(names.first, names.last)
single.surname <- c("Spina")
paste(names.first, single.surname)
single.surname <- c("Spina", "Otro")
paste(names.first, single.surname)
username <- function(first, last){
tolower(paste0(last, substr(first,1, 1)))
}
username('abel', 'chiola')
username(names.first, names.last)
