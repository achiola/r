family = "Times",
size = 14,
angle = 45,
color = "#FF0000"),
axis.text.y = element_text(face = "italic",
family = "Courier",
size = 16)) +
theme(panel.border = element_blank())
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold",
family = "Times",
size = 14,
angle = 45,
color = "#FF0000"),
axis.text.y = element_text(face = "italic",
family = "Courier",
size = 16)) +
theme(panel.border = element_blank()) +
theme(panel.grid.major = element_blank())
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold",
family = "Times",
size = 14,
angle = 45,
color = "#FF0000"),
axis.text.y = element_text(face = "italic",
family = "Courier",
size = 16)) +
theme(panel.border = element_blank()) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
install.packages("GGally")
library(ggplot2)
library(GGally)
bike <- read.csv("Seccion 09 - El paquete ggplot2/daily-bike-rentals.csv")
bike$season <- factor(bike$season,
levels = c(1,2,3,4),
labels = c("Invierno", "Primavera", "Verano", "Otoño"))
bike$weathersit <- factor(bike$weathersit,
levels = c(1,2,3),
labels = c("Despejado", "Nublado", "Lluvia"))
bike$weekday <- factor(bike$weekday,
levels = 0:6,
labels = c("D","L","Ma","Mi","J","V","S"))
bike$windspeed.fac <- cut(bike$windspeed,
breaks = 3,
labels = c("Poco","Mediano","Fuerte"))
ggplot(bike, aes(x = temp, y = cnt))
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=factor(windspeed.fac)))
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=windspeed.fac))
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=windspeed.fac)) +
theme(legend.position = "bottom")
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=windspeed.fac)) +
theme(legend.position = "bottom") +
geom_smooth(method = "lm", se = F, col = "red")
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=windspeed.fac)) +
theme(legend.position = "bottom") +
geom_smooth(method = "lm", se = F, col = "red") +
facet_grid(weekday ~ season)
auto <- read.csv("Seccion 09 - El paquete ggplot2/auto-mpg.csv",
stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
labels = c("3c", "4c", "5c", "6c", "8c"))
library(ggplot2)
library(GGally)
ggpairs(auto[,2:5])
ggpairs(auto[,2:5],
aes(colours = cylinders, alpha = 0.4))
ggpairs(auto[,2:5],
aes(colour = cylinders, alpha = 0.4))
ggpairs(auto[,2:5],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza") +
theme(plot.title = element_text(hjust = 0.5))
ggpairs(auto[,2:5],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = (combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
ggpairs(auto[,2:5],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = list(combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
ggpairs(auto[,2:7],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = list(combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
View(auto)
ggpairs(auto[,2:8],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = list(combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
install.packages("plot3D")
library(plot3D)
mtcars <- read.csv("Seccion 09 - El paquete ggplot2/mtcars.csv")
rownames(mtcars) <- mtcars$X
mtcars$X <- NULL
View(mtcars)
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg)
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón")
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 18)
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11)
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 18)
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 0)
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 90)
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 18)
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 18,
phi = 20)
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 18,
phi = 20,
main = "Titulo NNN")
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 18,
phi = 20,
main = "Titulo NNN",
xlab = "Despazamiento")
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 18,
phi = 20,
main = "Titulo NNN",
xlab = "Despazamiento",
ylab = "Peso",
zlab = "mpg")
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 18,
phi = 20,
main = "Titulo NNN",
xlab = "Despazamiento",
ylab = "Peso",
zlab = "mpg",
bty = "f")
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 11,
theta = 18,
phi = 20,
main = "Titulo NNN",
xlab = "Despazamiento",
ylab = "Peso",
zlab = "mpg",
bty = "g")
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 19,
cex = 0.5,
theta = 18,
phi = 20,
main = "Titulo NNN",
xlab = "Despazamiento",
ylab = "Peso",
zlab = "mpg",
bty = "g")
text3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
labels = rownames(mtcars))
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
clab = "Millas por galeón",
pch = 19,
cex = 0.5,
theta = 18,
phi = 20,
main = "Titulo NNN",
xlab = "Despazamiento",
ylab = "Peso",
zlab = "mpg",
bty = "g")
text3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
labels = rownames(mtcars),
add = T,
colkey = F,
cex = 0.5)
### 127. Textos e Histogramas en 3D
data("VADeaths")
head(VADeaths)
View(VADeaths)
hist3D(z = VADeaths)
hist3D(z = VADeaths,
scale = F,
expand = 0.1 )
hist3D(z = VADeaths,
scale = F,
expand = 0.01 )
hist3D(z = VADeaths,
scale = F,
expand = 0.01,
bty = "g")
hist3D(z = VADeaths,
scale = F,
expand = 0.01,
bty = "g",
phi = 30)
hist3D(z = VADeaths,
scale = F,
expand = 0.01,
bty = "g",
phi = 30,
col = "#1188CC")
hist3D(z = VADeaths,
scale = F,
expand = 0.01,
bty = "g",
phi = 30,
col = "#1188CC",
border = "black")
hist3D(z = VADeaths,
scale = F,
expand = 0.01,
bty = "g",
phi = 30,
col = "#1188CC",
border = "black",
shade = 0.2)
hist3D(z = VADeaths,
scale = F,
expand = 0.01,
bty = "g",
phi = 30,
col = "#1188CC",
border = "black",
shade = 0.2,
ltheta = 80)
hist3D(z = VADeaths,
scale = F,
expand = 0.01,
bty = "g",
phi = 30,
col = "#1188CC",
border = "black",
shade = 0.2,
ltheta = 80,
space = 0.2)
hist3D(z = VADeaths,
scale = F,
expand = 0.01,
bty = "g",
phi = 30,
col = "#1188CC",
border = "black",
shade = 0.2,
ltheta = 80,
space = 0.3)
hist3D(z = VADeaths,
scale = F,
expand = 0.01,
bty = "g",
phi = 30,
col = "#1188CC",
border = "black",
shade = 0.2,
ltheta = 80,
space = 0.3,
ticktype = "detailed")
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
type = "l")
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
type = "b")
scatter3D(x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
type = "h")
library(ggplot2)
library(GGally)
auto <- read.csv("Seccion 09 - El paquete ggplot2/auto-mpg.csv",
stringsAsFactors = F)
auto$cylinders <- factor(auto$cylinders,
labels = c("3c", "4c", "5c", "6c", "8c"))
ggpairs(auto[,2:8],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = list(combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
pdf(file = "multivarian.pd")
ggpairs(auto[,2:8],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = list(combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
pdf(file = "multivarian.pdf")
ggpairs(auto[,2:8],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = list(combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
#pdf(file = "Seccion 09 - El paquete ggplot2/multivarian.pdf")
png(file = "Seccion 09 - El paquete ggplot2/multivarian.png")
ggpairs(auto[,2:8],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = list(combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
#pdf(file = "Seccion 09 - El paquete ggplot2/multivarian.pdf")
png(file = "Seccion 09 - El paquete ggplot2/multivarian.png")
ggpairs(auto[,2:8],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = list(combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
#pdf(file = "Seccion 09 - El paquete ggplot2/multivarian.pdf")
png(file = "Seccion 09 - El paquete ggplot2/multivarian.png",
width = 3000, height = 3000, res = 72)
ggpairs(auto[,2:8],
aes(colour = cylinders, alpha = 0.4),
title = "Análisis multivanza",
upper = list(continuous = "density" ),
lower = list(combo = "denstrip")) +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
install.packages("recommenderlab")
library(recommenderlab)
data(MovieLense)
head(MovieLense)
rating_movies <- MovieLense[rowCounts(MovieLense) > 50,
colCounts(MovieLense) > 100]
t.id <- sample(x = c(T,F),
size = nrow(rating_movies),
replace = T,
prob = c(0.8, 0.2))
data_train <- rating_movies[t.id,]
data_test <- rating_movies[-t.id,]
data_test <- rating_movies[!t.id,]
### 131. Los datos de las peliculas y las matrices sparsed
rating_movies@data
rating_movies@data[1,1]
rating_movies@data[1,]
rating_movies@data[,1] # todas las valorazaciones hechas por el primer usuario
head(rownames(rating_movies))
head(colnames(rating_movies))
ibcf <- Recommender(data = data_train,
method = "IBCF",
parameter = list(k = 30))
ibcf.mod <- getModel(ibcf)
icbf.mod
ibcf.mod
#numero de comendaciones
n_rec <- 10
ibcf.pred <- predict(object = ibcf.mod,
newdata = data_test,
n = n_rec)
ibcf.pred <- predict(object = ibcf,
newdata = data_test,
n = n_rec)
ibcf.pred
ibcf.rec.matrix <- sapply(ibcf.pred@items, function(x){colnames(rating_movies)[x]})
ibcf.rec.matrix[,1:3]
view(ibcf.rec.matrix[,1:3])
View(ibcf.rec.matrix[,1:3])
### 133. Sistemas de filtrado colaborativo basado en usuarios
### UBCF
ubcf <- Recommender(data = data_train,
method = "UBCF")
ubcf.mod <- getModel(ubcf)
ubcf.mod
ubcf.pred <- predict(object = ubcf,
newdata = data_test,
n = n_rec)
ubcf.pred
ubcf.rec.matrix <- sapply(ubcf.pred@items,
function(x){colnames(rating_movies)[x]})
View(ubcf.rec.matrix)
View(ubcf.rec.matrix[,1:3])
#### 134. Representando la matriz de valoraciones
recommeder_models <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
names(recommeder_models)
image(MovieLense,
main = "Mapa de calor de la matriz de valoraciones")
min_n_movies <- quantile(rowCounts(MovieLense), 0.99)
min_n_users <- quantile(colCounts(MovieLense), 0.99)
min_n_movies
min_n_users
image(MovieLense[rowCounts(MovieLense)>440,colCounts(MovieLense)>371])
image(MovieLense[rowCounts(MovieLense)>min_n_movies,
colCounts(MovieLense)>min_n_users])
min_n_rmovies <- quantile(rowCounts(rating_movies), 0.99)
min_n_rusers <- quantile(colCounts(rating_movies), 0.99)
image(MovieLense[rowCounts(MovieLense)>min_n_rmovies,
colCounts(MovieLense)>min_n_rusers])
min_n_rmovies <- quantile(rowCounts(rating_movies), 0.98)
min_n_rusers <- quantile(colCounts(rating_movies), 0.98)
image(MovieLense[rowCounts(MovieLense)>min_n_rmovies,
colCounts(MovieLense)>min_n_rusers])
image(rating_movies[rowCounts(MovieLense)>min_n_rmovies,
colCounts(MovieLense)>min_n_rusers])
min_n_rusers <- quantile(colCounts(rating_movies), 0.98)
min_n_rmovies <- quantile(rowCounts(rating_movies), 0.98)
min_n_rusers <- quantile(colCounts(rating_movies), 0.98)
image(rating_movies[rowCounts(MovieLense)>min_n_rmovies,
colCounts(MovieLense)>min_n_rusers])
image(rating_movies[rowCounts(rating_movies)>min_n_rmovies,
colCounts(rating_movies)>min_n_rusers])
### 135. Filtrado colaborativo para datos binarios
# tranformamos en binaria la matriz de peliculas (solo para no cargar otro df)
rating_movies_viewed <- binarize(rating_movies,
minRating = 1)
t.id <- sample(x = c(T, F),
size = nrow(rating_movies_viewed),
replace = T,
prob = c(0.8, 0.2))
b_data_train <- rating_movies_viewed[t.id,]
b_data_test <- rating_movies_viewed[!t.id,]
b_model <- Recommender(data = b_data_train,
method = "IBCF",
parameter = list(method = "Jaccard"))
b_details <- getModel(b_model)
b_details
b_pred <- predict(object = b_model,
newdata = b_data_test,
n = n_rec)
b_rec_matrix <- sapply(b_pred@items, function(x){colnames(rating_movies)[x]})
View(b_rec_matrix[,1:4])
