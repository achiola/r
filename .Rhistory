tl.srt = 45,
col = colores(200),
addCoef.col = "black",
addcolorlabel = "no",
order = "AOE",
type = "lower",
diag = F,
addshade = "all")
corrplot(mtcars.cor,
method = "ellipse",
#shade.col = NA,
tl.col = "black",
tl.srt = 45,
col = colores(200),
addCoef.col = "black",
addcolorlabel = "no",
order = "AOE",
type = "lower",
diag = F,
addshade = "all")
corrplot(mtcars.cor,
method = "pie",
#shade.col = NA,
tl.col = "black",
tl.srt = 45,
col = colores(200),
addCoef.col = "black",
addcolorlabel = "no",
order = "AOE",
type = "lower",
diag = F,
addshade = "all")
## con ggplot tambien podemos representar una matrix de corr
library(reshape2)
mtcars.melted <- melt(mtcars.cor)
ggplot(data = mtcars.melted,
aes(x=Var1,
y=Var2,
fill = value))
ggplot(data = mtcars.melted,
aes(x=Var1,
y=Var2,
fill = value)) +
geom_tile()
####119. Agregando tonalidades a las matrices de color
get_lower_triangle <- function(cormat) {
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
get_upper_triangle <- function(cormat) {
cormat[lower.tri(cormat)] <- NA
return(cormat)
}
reorder_cormat <- function(cormat){
dd <- as.dist((1 - cormat)/2)
hc <- hclust(dd)
cormat <- cormat[hc$order,hc$order]
}
cormat <- reorder_cormat(mtcars.cor)
cormat
cormat.up <- get_upper_triangle(cormat)
cormat.up
cormat.up.melted <- melt(cormat.up,
na.rm = T)
ggplot(cormat.up.melted,
aes(x = Var1,
y = Var2,
fill = values)) +
geom_tile(color = "white")
ggplot(cormat.up.melted,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = "white")
ggplot(cormat.up.melted,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white")
ggplot(cormat.up.melted,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0
limit = c(-1, 1))
ggplot(cormat.up.melted,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1, 1))
ggplot(cormat.up.melted,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1, 1),
space = "Lab",
name = "Pearson\nCorrelation")
ggplot(cormat.up.melted,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1, 1),
space = "Lab",
name = "Pearson\nCorrelation") +
theme_minimal()
ggplot(cormat.up.melted,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1, 1),
space = "Lab",
name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))
ggplot(cormat.up.melted,
aes(x = Var1,
y = Var2,
fill = value)) +
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1, 1),
space = "Lab",
name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1)) +
coord_fixed()
install.packages("ggmap")
install.packages("MAP")
install.packages("maps")
library("ggmap")
library(maps)
tartu.data <- read.csv("Seccion 09 - El paquete ggplot2/tartu_housing.csv",
sep = ";")
View(tartu.data)
tartu.map <- get_map(location = "tartu",
maptype = "satellite",
zoom = 12)
?register_google
tartu.map <- get_map(source = "osm",
location = "tartu",
maptype = "satellite",
zoom = 12)
install.packages("OpenStreetMap")
tartu.map <- get_map(source = "osm",
location = "tartu",
maptype = "satellite",
zoom = 12)
get_map(source = "osm")
(map <- get_map(source = "osm"))
library(OpenStreetMap)
tartu.map <- get_map(source = "osm",
location = "tartu",
maptype = "satellite",
zoom = 12)
mad_map <- get_map(getbb("Madrid"),maptype = "toner-background")
tartu.map <- get_map(location = "tartu",
maptype = "satellite")
library(igraph)
g.dir <- graph(edges = c(1, 2, 2, 3, 2, 4, 1, 4, 5, 5, 3, 6, 5, 6),
n = 6)
g.n_dir <- graph(edges = c(1, 2, 2, 3, 2, 4, 1, 4, 5, 5, 3, 6, 5, 6),
n = 6,
directed = F)
par(nfrow=c(1,2))
par(mfrow=c(1,2))
plot(g.dir)
plot(g.n_dir)
g_isolated <- graph(c("Juan", "María",
"María", "Ana",
"Ana", "Juan",
"José", "María",
"Pedro", "José",
"Joel", "Pedro"),
isolates = c("Carmen",
"Antonio",
"Mario",
"Vicente"))
par(mfrow=c(1,1))
plot(g_isolated,
edge.arrow.size = 4,
vertex.color = "gold",
vertex.size = 15,
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8,
vertex.label.dist = 2,
edge.curved = 0.2)
plot(g_isolated,
edge.arrow.size = 1,
vertex.color = "gold",
vertex.size = 15,
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8,
vertex.label.dist = 2,
edge.curved = 0.2)
plot(g_isolated,
edge.arrow.size = 0.5,
vertex.color = "gold",
vertex.size = 15,
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8,
vertex.label.dist = 2,
edge.curved = 0.2)
library(ggplot2)
tooth <- read.csv("Seccion 09 - El paquete ggplot2/ToothGrowth.csv")
ggplot(tooth,
aes(x=dose, y=len))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot()
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
ggtitle("Crecimiento dental en fx de dosis")
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
ggtitle("Crecimiento dental en fx de dosis") +
xlab("Dosis de vitamina C")
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
ggtitle("Crecimiento dental en fx de dosis") +
xlab("Dosis de vitamina C") +
ylab("Crecimiento dental")
ggplot(tooth,
aes(x=dose, y=len, fill = as.factor(dose))) +
geom_boxplot() +
ggtitle("Crecimiento dental en fx de dosis") +
xlab("Dosis de vitamina C") +
ylab("Crecimiento dental")
ggplot(tooth,
aes(x=dose, y=len, fill = as.factor(dose))) +
geom_boxplot() +
ggtitle("Crecimiento dental en fx de dosis") +
xlab("Dosis de vitamina C") +
ylab("Crecimiento dental") +
labs(fill = "Dosis en mg/día")
ggplot(tooth,
aes(x=dose, y=len, fill = as.factor(dose))) +
geom_boxplot() +
ggtitle("Crecimiento dental en fx de dosis") +
xlab("Dosis de vitamina C") +
ylab("Crecimiento dental") +
labs(fill = "Dosis en mg/día") +
theme(legend.position = "top")
ggplot(tooth,
aes(x=dose, y=len, fill = as.factor(dose))) +
geom_boxplot() +
ggtitle("Crecimiento dental en fx de dosis") +
xlab("Dosis de vitamina C") +
ylab("Crecimiento dental") +
labs(fill = "Dosis en mg/día") +
theme(legend.position = "top") +
guides(fill = NULL)
ggplot(tooth,
aes(x=dose, y=len, fill = as.factor(dose))) +
geom_boxplot() +
ggtitle("Crecimiento dental en fx de dosis") +
xlab("Dosis de vitamina C") +
ylab("Crecimiento dental") +
labs(fill = "Dosis en mg/día") +
theme(legend.position = "bottom") +
guides(fill = NULL)
ggplot(tooth,
aes(x=dose, y=len, fill = as.factor(dose))) +
geom_boxplot() +
ggtitle("Crecimiento dental en fx de dosis") +
xlab("Dosis de vitamina C") +
ylab("Crecimiento dental") +
labs(fill = "Dosis en mg/día") +
theme(legend.position = "bottom") +
guides(fill = F)
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
theme_bw()
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
theme_bw() +
theme_dark()
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
theme_bw() +
theme_dark() +
theme_classic()
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
theme_bw() +
theme_dark() +
theme_classic() +
theme_gray()
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
theme(plot.background = element_rect(fill = "red"))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold"))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold", family = "Courier New"))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold", family = "Times"))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold", family = "Times", size = 14))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold",
family = "Times",
size = 14,
angle = 45))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold",
family = "Times",
size = 14,
angle = 45,
color = "#FF0000"))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold",
family = "Times",
size = 14,
angle = 45,
color = "#FF0000"),
axis.text.y = element_text(face = "italic"))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold",
family = "Times",
size = 14,
angle = 45,
color = "#FF0000"),
axis.text.y = element_text(face = "italic",
family = "Courier"))
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold",
family = "Times",
size = 14,
angle = 45,
color = "#FF0000"),
axis.text.y = element_text(face = "italic",
family = "Courier",
size = 16)) +
theme(panel.border = element_blank())
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold",
family = "Times",
size = 14,
angle = 45,
color = "#FF0000"),
axis.text.y = element_text(face = "italic",
family = "Courier",
size = 16)) +
theme(panel.border = element_blank()) +
theme(panel.grid.major = element_blank())
ggplot(tooth,
aes(x=dose, y=len)) +
geom_boxplot() +
#  theme_bw() +
#  theme_dark() +
#  theme_classic() +
theme_gray() +
#  theme(plot.background = element_rect(fill = "red"))
theme(axis.text.x = element_text(face = "bold",
family = "Times",
size = 14,
angle = 45,
color = "#FF0000"),
axis.text.y = element_text(face = "italic",
family = "Courier",
size = 16)) +
theme(panel.border = element_blank()) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
install.packages("GGally")
library(ggplot2)
library(GGally)
bike <- read.csv("Seccion 09 - El paquete ggplot2/daily-bike-rentals.csv")
bike$season <- factor(bike$season,
levels = c(1,2,3,4),
labels = c("Invierno", "Primavera", "Verano", "Otoño"))
bike$weathersit <- factor(bike$weathersit,
levels = c(1,2,3),
labels = c("Despejado", "Nublado", "Lluvia"))
bike$weekday <- factor(bike$weekday,
levels = 0:6,
labels = c("D","L","Ma","Mi","J","V","S"))
bike$windspeed.fac <- cut(bike$windspeed,
breaks = 3,
labels = c("Poco","Mediano","Fuerte"))
ggplot(bike, aes(x = temp, y = cnt))
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=factor(windspeed.fac)))
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=windspeed.fac))
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=windspeed.fac)) +
theme(legend.position = "bottom")
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=windspeed.fac)) +
theme(legend.position = "bottom") +
geom_smooth(method = "lm", se = F, col = "red")
ggplot(bike, aes(x = temp, y = cnt)) +
geom_point(size = 3, aes(color=windspeed.fac)) +
theme(legend.position = "bottom") +
geom_smooth(method = "lm", se = F, col = "red") +
facet_grid(weekday ~ season)
